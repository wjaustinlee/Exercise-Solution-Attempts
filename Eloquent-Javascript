#Chapter 4
##Deep comparison
###The == operator compares objects by identity. But sometimes you’d prefer to compare the values of their actual properties. Write a function deepEqual that takes two values and returns true only if they are the same value or are objects with the same properties, where the values of the properties are equal when compared with a recursive call to deepEqual. To find out whether values should be compared directly (use the === operator for that) or have their properties compared, you can use the typeof operator. If it produces "object" for both values, you should do a deep comparison. But you have to take one silly exception into account: because of a historical accident, typeof null also produces "object". The Object.keys function will be useful when you need to go over the properties of objects to compare them.
  function deepEqual(item1, item2){
    if (typeof item1 === 'object' && typeof item2 === 'object' && item1 != null){
      for (let key in Object.keys(item1)){
        if (!item2[Object.keys(item1)[key]]){
          return false;
        }
        return deepEqual(item1[Object.keys(item1)[key]], item2[Object.keys(item2)[key]]);
      }
    }else{
      if (item1 != item2){
        return false;
      }
    }
    return true;
  }



#Chapter 5
##Flattening
###Use the reduce method in combination with the concat method to “flatten” an array of arrays into a single array that has all the elements of the original arrays.
  let arrays = [[1, 2, 3], [4, 5], [6]];
  // Your code here.
  let result = arrays.reduce((total, next) => total.concat(next));

  console.log(result);
  // → [1, 2, 3, 4, 5, 6]
  
##Your own loop
###Write a higher-order function loop that provides something like a for loop statement. It takes a value, a test function, an update function, and a body function. Each iteration, it first runs the test function on the current loop value and stops if that returns false. Then it calls the body function, giving it the current value. Finally, it calls the update function to create a new value and starts from the beginning.
  function loop(index, test, testChange, execute){
    if (test(index)){
      execute(index);
      loop(testChange(index), test, testChange, execute);
    };
  }

  loop(3, n => n > 0, n => n - 1, console.log);
  // → 3
  // → 2
  // → 1

##Everything
###Analogous to the some method, arrays also have an every method. This one returns true when the given function returns true for every element in the array. In a way, some is a version of the || operator that acts on arrays, and every is like the && operator.
###Implement every as a function that takes an array and a predicate function as parameters. Write two versions, one using a loop and one using the some method.
####Loop version
  function every(array, test) {
    for (let element of array){
      if (!test(element)){
          return false;
          };
    }
    return true;
  }
###Some method version
  console.log(every([1, 3, 5], n => n < 10));
  // → true
  console.log(every([2, 4, 16], n => n < 10));
  // → false
  console.log(every([], n => n < 10));
  // → true
